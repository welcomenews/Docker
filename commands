
```
# Удалить имеджи с названиями none
docker rmi -f $(docker images -f "dangling=true" -q)

# Смотреть настройку подключения к docker
docker context ls

# Вытянуть более детальную инфу из context
docker context inspect <имя context>

#  Поиск образа
docker search <имя образа>

# Вытянуть более детальную инфу из образа
docker image inspect <имя образа>

# Копируем файл ИЗ КОНТЕЙНЕРА на хост
docker cp <имя контейнера>:/<путь к файлу> <путь куда копировать>

# Копируем файл ИЗ ХОСТА в контейнер
docker cp <путь к файлу> <имя контейнера>:/<путь куда копировать>

# Создаём новый контейнер из образа
docker create

# Выполнить команду в запущенном контейнере
docker exec -it <имя контейнера> <команда>

# Вывести список контейнеров
docker ls

# удалить все остановленные контейнеры
docker prune

# скопировать контейнер со всем содержимым внутри
docker commit -m "бла бла бла" <имя контейнера с которого делате>  <имя нового контейнера>

# Показывает утилизацию запущенных контейнеров
docker stats

# Создать волум
docker volume create --name <имя волума>

# Вытянуть более детальную инфу из волума
docker volume inspect <имя волума>

# Смотреть список сетей
docker network ls
bridge  - дефолтный сетевой драйвер, связывает несколько контейнеров в машине
host    - убирает сетевую изоляцию между хостом и контейнером
none    - Отрубить всю сеть
overlay - используется в docker-swarm. Соеденить несколько контейнеров на разных хостах
macvlan - для приложений требующих прямой коннект к сети

# Создать сеть
docker network create -d bridge <имя сети>


```
